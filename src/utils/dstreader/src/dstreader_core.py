# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dstreader_core
else:
    import _dstreader_core

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_intp():
    return _dstreader_core.new_intp()

def copy_intp(value):
    return _dstreader_core.copy_intp(value)

def delete_intp(obj):
    return _dstreader_core.delete_intp(obj)

def intp_assign(obj, value):
    return _dstreader_core.intp_assign(obj, value)

def intp_value(obj):
    return _dstreader_core.intp_value(obj)

def eventNameFromId(bank, len):
    return _dstreader_core.eventNameFromId(bank, len)

def n_banks_total_():
    return _dstreader_core.n_banks_total_()

def event_all_banks_(list):
    return _dstreader_core.event_all_banks_(list)

def new_empty_bank_list_():
    return _dstreader_core.new_empty_bank_list_()

def new_bank_list_with_all_banks_():
    return _dstreader_core.new_bank_list_with_all_banks_()

def event_commons_to_buffers_(n_banks, bank_types, bank_buffer_sizes, bank_buffers):
    return _dstreader_core.event_commons_to_buffers_(n_banks, bank_types, bank_buffer_sizes, bank_buffers)

def event_commons_to_buffers_from_bank_list_(bank_list, n_banks, bank_types, bank_buffer_sizes, bank_buffers):
    return _dstreader_core.event_commons_to_buffers_from_bank_list_(bank_list, n_banks, bank_types, bank_buffer_sizes, bank_buffers)

def event_buffers_to_commons_(n_banks, bank_types, bank_buffers):
    return _dstreader_core.event_buffers_to_commons_(n_banks, bank_types, bank_buffers)

def event_id_from_name_():
    return _dstreader_core.event_id_from_name_()

def event_name_from_id_(bank_id, len):
    return _dstreader_core.event_name_from_id_(bank_id, len)

def event_version_from_id_(bank_id):
    return _dstreader_core.event_version_from_id_(bank_id)

def event_set_dump_format_(list, format):
    return _dstreader_core.event_set_dump_format_(list, format)

def event_dumpf_(fp, list):
    return _dstreader_core.event_dumpf_(fp, list)

def event_dump_(list):
    return _dstreader_core.event_dump_(list)

def event_read_(unit, want_banks, got_banks, event):
    return _dstreader_core.event_read_(unit, want_banks, got_banks, event)

def event_write_(unit, banks, event):
    return _dstreader_core.event_write_(unit, banks, event)

def nBanksTotal():
    return _dstreader_core.nBanksTotal()

def eventAllBanks(list):
    return _dstreader_core.eventAllBanks(list)

def newEmptyBankList():
    return _dstreader_core.newEmptyBankList()

def newBankListWithAllBanks():
    return _dstreader_core.newBankListWithAllBanks()

def eventBuffersToCommons(n_banks, bank_types, bank_buffers):
    return _dstreader_core.eventBuffersToCommons(n_banks, bank_types, bank_buffers)

def eventCommonsToBuffers(n_banks, bank_types, bank_buffer_sizes, bank_buffers):
    return _dstreader_core.eventCommonsToBuffers(n_banks, bank_types, bank_buffer_sizes, bank_buffers)

def eventCommonsToBuffersFromBankList(bank_list, n_banks, bank_types, bank_buffer_sizes, bank_buffers):
    return _dstreader_core.eventCommonsToBuffersFromBankList(bank_list, n_banks, bank_types, bank_buffer_sizes, bank_buffers)

def eventIdFromName():
    return _dstreader_core.eventIdFromName()

def eventVersionFromId(bank_id):
    return _dstreader_core.eventVersionFromId(bank_id)

def eventSetDumpFormat(list, format):
    return _dstreader_core.eventSetDumpFormat(list, format)

def eventDumpf(fp, list):
    return _dstreader_core.eventDumpf(fp, list)

def eventDump(list):
    return _dstreader_core.eventDump(list)

def eventRead(unit, want_banks, got_banks, event):
    return _dstreader_core.eventRead(unit, want_banks, got_banks, event)

def eventWrite(unit, banks, event):
    return _dstreader_core.eventWrite(unit, banks, event)

def dstOpenUnit(unit, file, mode):
    return _dstreader_core.dstOpenUnit(unit, file, mode)

def dstCloseUnit(unit):
    return _dstreader_core.dstCloseUnit(unit)
HR_UNIV_MAXMIR = _dstreader_core.HR_UNIV_MAXMIR
HR_UNIV_PRO2MIR = _dstreader_core.HR_UNIV_PRO2MIR
HR_UNIV_MIRTUBE = _dstreader_core.HR_UNIV_MIRTUBE
HR_UNIV_MAXTUBE = _dstreader_core.HR_UNIV_MAXTUBE
TA_UNIV_MAXMIR = _dstreader_core.TA_UNIV_MAXMIR
TA_UNIV_PRO2MIR = _dstreader_core.TA_UNIV_PRO2MIR
TA_UNIV_MIRTUBE = _dstreader_core.TA_UNIV_MIRTUBE
TA_UNIV_MAXTUBE = _dstreader_core.TA_UNIV_MAXTUBE
MODE_READ_DST = _dstreader_core.MODE_READ_DST
MODE_WRITE_DST = _dstreader_core.MODE_WRITE_DST
MODE_APPEND_DST = _dstreader_core.MODE_APPEND_DST
DIAG_NONE_DST = _dstreader_core.DIAG_NONE_DST
DIAG_WARN_DST = _dstreader_core.DIAG_WARN_DST
DIAG_FULL_DST = _dstreader_core.DIAG_FULL_DST
DFLT_DST_BANK_SIZE = _dstreader_core.DFLT_DST_BANK_SIZE
TRUE = _dstreader_core.TRUE
FALSE = _dstreader_core.FALSE
PI = _dstreader_core.PI
D2R = _dstreader_core.D2R
R2D = _dstreader_core.R2D
BR = _dstreader_core.BR
LR = _dstreader_core.LR
MD = _dstreader_core.MD
TL = _dstreader_core.TL
CLF_LATITUDE = _dstreader_core.CLF_LATITUDE
CLF_LONGITUDE = _dstreader_core.CLF_LONGITUDE
CLF_ALTITUDE = _dstreader_core.CLF_ALTITUDE
MAX_DST_FILE_UNITS = _dstreader_core.MAX_DST_FILE_UNITS
MAX_DST_BANK_LISTS = _dstreader_core.MAX_DST_BANK_LISTS
BANK_LIST_ERROR = _dstreader_core.BANK_LIST_ERROR

def new_bank_list_(size):
    return _dstreader_core.new_bank_list_(size)

def del_bank_list_(list):
    return _dstreader_core.del_bank_list_(list)

def clr_bank_list_(list):
    return _dstreader_core.clr_bank_list_(list)

def cnt_bank_list_(list):
    return _dstreader_core.cnt_bank_list_(list)

def tst_bank_list_(list, bank):
    return _dstreader_core.tst_bank_list_(list, bank)

def add_bank_list_(list, bank):
    return _dstreader_core.add_bank_list_(list, bank)

def rem_bank_list_(list, bank):
    return _dstreader_core.rem_bank_list_(list, bank)

def sum_bank_list_(list1, list2):
    return _dstreader_core.sum_bank_list_(list1, list2)

def dif_bank_list_(list1, list2):
    return _dstreader_core.dif_bank_list_(list1, list2)

def cpy_bank_list_(list1, list2):
    return _dstreader_core.cpy_bank_list_(list1, list2)

def com_bank_list_(list1, list2):
    return _dstreader_core.com_bank_list_(list1, list2)

def itr_bank_list_(list, n):
    return _dstreader_core.itr_bank_list_(list, n)

def cmp_bank_list_(list1, list2):
    return _dstreader_core.cmp_bank_list_(list1, list2)

def dsc_bank_list_(list, fp):
    return _dstreader_core.dsc_bank_list_(list, fp)

def newBankList(size):
    return _dstreader_core.newBankList(size)

def delBankList(list):
    return _dstreader_core.delBankList(list)

def clrBankList(list):
    return _dstreader_core.clrBankList(list)

def cntBankList(list):
    return _dstreader_core.cntBankList(list)

def tstBankList(list, bank):
    return _dstreader_core.tstBankList(list, bank)

def addBankList(list, bank):
    return _dstreader_core.addBankList(list, bank)

def remBankList(list, bank):
    return _dstreader_core.remBankList(list, bank)

def sumBankList(list1, list2):
    return _dstreader_core.sumBankList(list1, list2)

def difBankList(list1, list2):
    return _dstreader_core.difBankList(list1, list2)

def cpyBankList(list1, list2):
    return _dstreader_core.cpyBankList(list1, list2)

def comBankList(list1, list2):
    return _dstreader_core.comBankList(list1, list2)

def itrBankList(list, n):
    return _dstreader_core.itrBankList(list, n)

def cmpBankList(list1, list2):
    return _dstreader_core.cmpBankList(list1, list2)

def dscBankList(list, fp):
    return _dstreader_core.dscBankList(list, fp)
RUSDRAW_BANKID = _dstreader_core.RUSDRAW_BANKID
RUSDRAW_BANKVERSION = _dstreader_core.RUSDRAW_BANKVERSION

def rusdraw_common_to_bank_():
    return _dstreader_core.rusdraw_common_to_bank_()

def rusdraw_bank_to_dst_(NumUnit):
    return _dstreader_core.rusdraw_bank_to_dst_(NumUnit)

def rusdraw_common_to_dst_(NumUnit):
    return _dstreader_core.rusdraw_common_to_dst_(NumUnit)

def rusdraw_bank_to_common_(bank):
    return _dstreader_core.rusdraw_bank_to_common_(bank)

def rusdraw_common_to_dump_(opt1):
    return _dstreader_core.rusdraw_common_to_dump_(opt1)

def rusdraw_common_to_dumpf_(fp, opt2):
    return _dstreader_core.rusdraw_common_to_dumpf_(fp, opt2)

def rusdraw_bank_buffer_(rusdraw_bank_buffer_size):
    return _dstreader_core.rusdraw_bank_buffer_(rusdraw_bank_buffer_size)

def rusdraw_site_from_bitflag(tower_bitflag):
    return _dstreader_core.rusdraw_site_from_bitflag(tower_bitflag)

def rusdraw_bitflag_from_site(rusdraw_site):
    return _dstreader_core.rusdraw_bitflag_from_site(rusdraw_site)
RUSDRAW_BR = _dstreader_core.RUSDRAW_BR
RUSDRAW_LR = _dstreader_core.RUSDRAW_LR
RUSDRAW_SK = _dstreader_core.RUSDRAW_SK
RUSDRAW_BRLR = _dstreader_core.RUSDRAW_BRLR
RUSDRAW_BRSK = _dstreader_core.RUSDRAW_BRSK
RUSDRAW_LRSK = _dstreader_core.RUSDRAW_LRSK
RUSDRAW_BRLRSK = _dstreader_core.RUSDRAW_BRLRSK
RUSDRAWMWF = _dstreader_core.RUSDRAWMWF
rusdraw_nchan_sd = _dstreader_core.rusdraw_nchan_sd
RUSDRAW_DST_GZ = _dstreader_core.RUSDRAW_DST_GZ
class rusdraw_dst_common(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    event_num = property(_dstreader_core.rusdraw_dst_common_event_num_get)
    event_code = property(_dstreader_core.rusdraw_dst_common_event_code_get)
    site = property(_dstreader_core.rusdraw_dst_common_site_get)
    run_id = property(_dstreader_core.rusdraw_dst_common_run_id_get)
    trig_id = property(_dstreader_core.rusdraw_dst_common_trig_id_get)
    errcode = property(_dstreader_core.rusdraw_dst_common_errcode_get)
    yymmdd = property(_dstreader_core.rusdraw_dst_common_yymmdd_get)
    hhmmss = property(_dstreader_core.rusdraw_dst_common_hhmmss_get)
    usec = property(_dstreader_core.rusdraw_dst_common_usec_get)
    monyymmdd = property(_dstreader_core.rusdraw_dst_common_monyymmdd_get)
    monhhmmss = property(_dstreader_core.rusdraw_dst_common_monhhmmss_get)
    nofwf = property(_dstreader_core.rusdraw_dst_common_nofwf_get)
    nretry = property(_dstreader_core.rusdraw_dst_common_nretry_get)
    wf_id = property(_dstreader_core.rusdraw_dst_common_wf_id_get)
    trig_code = property(_dstreader_core.rusdraw_dst_common_trig_code_get)
    xxyy = property(_dstreader_core.rusdraw_dst_common_xxyy_get)
    clkcnt = property(_dstreader_core.rusdraw_dst_common_clkcnt_get)
    mclkcnt = property(_dstreader_core.rusdraw_dst_common_mclkcnt_get)
    fadcti = property(_dstreader_core.rusdraw_dst_common_fadcti_get)
    fadcav = property(_dstreader_core.rusdraw_dst_common_fadcav_get)
    fadc = property(_dstreader_core.rusdraw_dst_common_fadc_get)
    pchmip = property(_dstreader_core.rusdraw_dst_common_pchmip_get)
    pchped = property(_dstreader_core.rusdraw_dst_common_pchped_get)
    lhpchmip = property(_dstreader_core.rusdraw_dst_common_lhpchmip_get)
    lhpchped = property(_dstreader_core.rusdraw_dst_common_lhpchped_get)
    rhpchmip = property(_dstreader_core.rusdraw_dst_common_rhpchmip_get)
    rhpchped = property(_dstreader_core.rusdraw_dst_common_rhpchped_get)
    mftndof = property(_dstreader_core.rusdraw_dst_common_mftndof_get)
    mip = property(_dstreader_core.rusdraw_dst_common_mip_get)
    mftchi2 = property(_dstreader_core.rusdraw_dst_common_mftchi2_get)
    mftp = property(_dstreader_core.rusdraw_dst_common_mftp_get)
    mftpe = property(_dstreader_core.rusdraw_dst_common_mftpe_get)

    def __init__(self):
        _dstreader_core.rusdraw_dst_common_swiginit(self, _dstreader_core.new_rusdraw_dst_common())
    __swig_destroy__ = _dstreader_core.delete_rusdraw_dst_common

# Register rusdraw_dst_common in _dstreader_core:
_dstreader_core.rusdraw_dst_common_swigregister(rusdraw_dst_common)


def get_rusdraw_run_id():
    return _dstreader_core.get_rusdraw_run_id()

def get_rusdraw_trig_id():
    return _dstreader_core.get_rusdraw_trig_id()

def get_rusdraw_nretry():
    return _dstreader_core.get_rusdraw_nretry()

def get_rusdraw_wf_id():
    return _dstreader_core.get_rusdraw_wf_id()

def get_rusdraw_trig_code():
    return _dstreader_core.get_rusdraw_trig_code()

def get_rusdraw_xxyy():
    return _dstreader_core.get_rusdraw_xxyy()

def get_rusdraw_clkcnt():
    return _dstreader_core.get_rusdraw_clkcnt()

def get_rusdraw_mclkcnt():
    return _dstreader_core.get_rusdraw_mclkcnt()

def get_rusdraw_fadcti():
    return _dstreader_core.get_rusdraw_fadcti()

def get_rusdraw_fadcav():
    return _dstreader_core.get_rusdraw_fadcav()

def get_rusdraw_fadc():
    return _dstreader_core.get_rusdraw_fadc()

def get_rusdraw_pchmip():
    return _dstreader_core.get_rusdraw_pchmip()

def get_rusdraw_pchped():
    return _dstreader_core.get_rusdraw_pchped()

def get_rusdraw_lhpchmip():
    return _dstreader_core.get_rusdraw_lhpchmip()

def get_rusdraw_lhpchped():
    return _dstreader_core.get_rusdraw_lhpchped()

def get_rusdraw_rhpchmip():
    return _dstreader_core.get_rusdraw_rhpchmip()

def get_rusdraw_rhpchped():
    return _dstreader_core.get_rusdraw_rhpchped()

def get_rusdraw_mftndof():
    return _dstreader_core.get_rusdraw_mftndof()

def get_rusdraw_mip():
    return _dstreader_core.get_rusdraw_mip()

def get_rusdraw_mftchi2():
    return _dstreader_core.get_rusdraw_mftchi2()

def get_rusdraw_mftp():
    return _dstreader_core.get_rusdraw_mftp()

def get_rusdraw_mftpe():
    return _dstreader_core.get_rusdraw_mftpe()
RUSDMC_BANKID = _dstreader_core.RUSDMC_BANKID
RUSDMC_BANKVERSION = _dstreader_core.RUSDMC_BANKVERSION

def rusdmc_common_to_bank_():
    return _dstreader_core.rusdmc_common_to_bank_()

def rusdmc_bank_to_dst_(NumUnit):
    return _dstreader_core.rusdmc_bank_to_dst_(NumUnit)

def rusdmc_common_to_dst_(NumUnit):
    return _dstreader_core.rusdmc_common_to_dst_(NumUnit)

def rusdmc_bank_to_common_(bank):
    return _dstreader_core.rusdmc_bank_to_common_(bank)

def rusdmc_common_to_dump_(opt1):
    return _dstreader_core.rusdmc_common_to_dump_(opt1)

def rusdmc_common_to_dumpf_(fp, opt2):
    return _dstreader_core.rusdmc_common_to_dumpf_(fp, opt2)

def rusdmc_bank_buffer_(rusdmc_bank_buffer_size):
    return _dstreader_core.rusdmc_bank_buffer_(rusdmc_bank_buffer_size)
class rusdmc_dst_common(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    event_num = property(_dstreader_core.rusdmc_dst_common_event_num_get)
    parttype = property(_dstreader_core.rusdmc_dst_common_parttype_get)
    corecounter = property(_dstreader_core.rusdmc_dst_common_corecounter_get)
    tc = property(_dstreader_core.rusdmc_dst_common_tc_get)
    energy = property(_dstreader_core.rusdmc_dst_common_energy_get)
    height = property(_dstreader_core.rusdmc_dst_common_height_get)
    theta = property(_dstreader_core.rusdmc_dst_common_theta_get)
    phi = property(_dstreader_core.rusdmc_dst_common_phi_get)
    corexyz = property(_dstreader_core.rusdmc_dst_common_corexyz_get)

    def __init__(self):
        _dstreader_core.rusdmc_dst_common_swiginit(self, _dstreader_core.new_rusdmc_dst_common())
    __swig_destroy__ = _dstreader_core.delete_rusdmc_dst_common

# Register rusdmc_dst_common in _dstreader_core:
_dstreader_core.rusdmc_dst_common_swigregister(rusdmc_dst_common)
cvar = _dstreader_core.cvar
rusdraw_ = cvar.rusdraw_


def get_rusdmc_corexyz():
    return _dstreader_core.get_rusdmc_corexyz()

rusdmc_ = cvar.rusdmc_

