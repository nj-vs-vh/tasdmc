// This file was generated by generate_numpy_accessors.py and provides accessor functions
// to array fields of rusdraw_ struct of type rusdraw_dst_common, defined in
// /home/njvh/Documents/Science/ta/tasdmc/src/sdanalysis/dst2k-ta/inc/rusdraw_dst.h

// The structure body is:

// integer4 event_num;		                        /* event number */
// integer4 event_code;                                  /* 1=data, 0=Monte Carlo */
// integer4 site;                                        /* BR=0,LR=1,SK=2,BRLR=3,BRSK=4,LRSK=5,BRLRSK=6 */
// integer4 run_id[3];                                   /* run number for [0]-BR,[1]-LR,[2]-SK, -1 if irrelevant */
// integer4 trig_id[3];		                        /* event trigger id for each tower, -1 if irrelevant */
// integer4 errcode;                                     /* should be zero if there were no readout problems */
// integer4 yymmdd;		                        /* event year, month, day */
// integer4 hhmmss;		                        /* event hour minut second */
// integer4 usec;		                        /* event micro second */
// integer4 monyymmdd;                                   /* yymmdd at the beginning of the mon. cycle used in this event */
// integer4 monhhmmss;                                   /* hhmmss at the beginning of the mon. cycle used in this event */
// integer4 nofwf;		                        /* number of waveforms in the event */
// /* These arrays contain the waveform information */
// integer4 nretry[RUSDRAWMWF];                          /* number of retries to get the waveform */
// integer4 wf_id[RUSDRAWMWF];                           /* waveform id in the trigger */
// integer4 trig_code[RUSDRAWMWF];                       /* level 1 trigger code */
// integer4 xxyy[RUSDRAWMWF];	                        /* detector that was hit (XXYY) */
// integer4 clkcnt[RUSDRAWMWF];	                        /* Clock count at the waveform beginning */
// integer4 mclkcnt[RUSDRAWMWF];	                        /* max clock count for detector, around 50E6 */
// /* 2nd index: [0] - lower, [1] - upper layers */
// integer4 fadcti[RUSDRAWMWF][2];	                /* fadc trace integral, for upper and lower */
// integer4 fadcav[RUSDRAWMWF][2];                       /* FADC average */
// integer4 fadc[RUSDRAWMWF][2][rusdraw_nchan_sd];	/* fadc trace for upper and lower */
// /* Useful calibration information  */
// integer4 pchmip[RUSDRAWMWF][2];     /* peak channel of 1MIP histograms */
// integer4 pchped[RUSDRAWMWF][2];     /* peak channel of pedestal histograms */
// integer4 lhpchmip[RUSDRAWMWF][2];   /* left half-peak channel for 1mip histogram */
// integer4 lhpchped[RUSDRAWMWF][2];   /* left half-peak channel of pedestal histogram */
// integer4 rhpchmip[RUSDRAWMWF][2];   /* right half-peak channel for 1mip histogram */
// integer4 rhpchped[RUSDRAWMWF][2];   /* right half-peak channel of pedestal histograms */
// /* Results from fitting 1MIP histograms */
// integer4 mftndof[RUSDRAWMWF][2]; /* number of degrees of freedom in 1MIP fit */
// real8 mip[RUSDRAWMWF][2];        /* 1MIP value (ped. subtracted) */
// real8 mftchi2[RUSDRAWMWF][2];    /* chi2 of the 1MIP fit */
// /*
// 1MIP Fit function:
// [3]*(1+[2]*(x-[0]))*exp(-(x-[0])*(x-[0])/2/[1]/[1])/sqrt(2*PI)/[1]
// 4 fit parameters:
// [0]=Gauss Mean
// [1]=Gauss Sigma
// [2]=Linear Coefficient
// [3]=Overall Scalling Factor
// */
// real8 mftp[RUSDRAWMWF][2][4];    /* 1MIP fit parameters */
// real8 mftpe[RUSDRAWMWF][2][4];   /* Errors on 1MIP fit parameters */


%apply ( integer4 ARGOUT_ARRAY3[ANY][ANY][ANY] ) { (integer4 target[ANY][ANY][ANY]) };
%apply ( real8 ARGOUT_ARRAY3[ANY][ANY][ANY] ) { (real8 target[ANY][ANY][ANY]) };
%apply ( integer4 ARGOUT_ARRAY2[ANY][ANY] ) { (integer4 target[ANY][ANY]) };
%apply ( integer4 ARGOUT_ARRAY1[ANY] ) { (integer4 target[ANY]) };
%apply ( real8 ARGOUT_ARRAY2[ANY][ANY] ) { (real8 target[ANY][ANY]) };
%inline %{
void get_rusdraw_run_id(integer4 target[3])
{
    memcpy(
        target,
        rusdraw_.run_id,
        sizeof(rusdraw_.run_id)
    );
}


void get_rusdraw_trig_id(integer4 target[3])
{
    memcpy(
        target,
        rusdraw_.trig_id,
        sizeof(rusdraw_.trig_id)
    );
}


void get_rusdraw_nretry(integer4 target[RUSDRAWMWF])
{
    memcpy(
        target,
        rusdraw_.nretry,
        sizeof(rusdraw_.nretry)
    );
}


void get_rusdraw_wf_id(integer4 target[RUSDRAWMWF])
{
    memcpy(
        target,
        rusdraw_.wf_id,
        sizeof(rusdraw_.wf_id)
    );
}


void get_rusdraw_trig_code(integer4 target[RUSDRAWMWF])
{
    memcpy(
        target,
        rusdraw_.trig_code,
        sizeof(rusdraw_.trig_code)
    );
}


void get_rusdraw_xxyy(integer4 target[RUSDRAWMWF])
{
    memcpy(
        target,
        rusdraw_.xxyy,
        sizeof(rusdraw_.xxyy)
    );
}


void get_rusdraw_clkcnt(integer4 target[RUSDRAWMWF])
{
    memcpy(
        target,
        rusdraw_.clkcnt,
        sizeof(rusdraw_.clkcnt)
    );
}


void get_rusdraw_mclkcnt(integer4 target[RUSDRAWMWF])
{
    memcpy(
        target,
        rusdraw_.mclkcnt,
        sizeof(rusdraw_.mclkcnt)
    );
}


void get_rusdraw_fadcti(integer4 target[RUSDRAWMWF][2])
{
    memcpy(
        target,
        rusdraw_.fadcti,
        sizeof(rusdraw_.fadcti)
    );
}


void get_rusdraw_fadcav(integer4 target[RUSDRAWMWF][2])
{
    memcpy(
        target,
        rusdraw_.fadcav,
        sizeof(rusdraw_.fadcav)
    );
}


void get_rusdraw_fadc(integer4 target[RUSDRAWMWF][2][rusdraw_nchan_sd])
{
    memcpy(
        target,
        rusdraw_.fadc,
        sizeof(rusdraw_.fadc)
    );
}


void get_rusdraw_pchmip(integer4 target[RUSDRAWMWF][2])
{
    memcpy(
        target,
        rusdraw_.pchmip,
        sizeof(rusdraw_.pchmip)
    );
}


void get_rusdraw_pchped(integer4 target[RUSDRAWMWF][2])
{
    memcpy(
        target,
        rusdraw_.pchped,
        sizeof(rusdraw_.pchped)
    );
}


void get_rusdraw_lhpchmip(integer4 target[RUSDRAWMWF][2])
{
    memcpy(
        target,
        rusdraw_.lhpchmip,
        sizeof(rusdraw_.lhpchmip)
    );
}


void get_rusdraw_lhpchped(integer4 target[RUSDRAWMWF][2])
{
    memcpy(
        target,
        rusdraw_.lhpchped,
        sizeof(rusdraw_.lhpchped)
    );
}


void get_rusdraw_rhpchmip(integer4 target[RUSDRAWMWF][2])
{
    memcpy(
        target,
        rusdraw_.rhpchmip,
        sizeof(rusdraw_.rhpchmip)
    );
}


void get_rusdraw_rhpchped(integer4 target[RUSDRAWMWF][2])
{
    memcpy(
        target,
        rusdraw_.rhpchped,
        sizeof(rusdraw_.rhpchped)
    );
}


void get_rusdraw_mftndof(integer4 target[RUSDRAWMWF][2])
{
    memcpy(
        target,
        rusdraw_.mftndof,
        sizeof(rusdraw_.mftndof)
    );
}


void get_rusdraw_mip(real8 target[RUSDRAWMWF][2])
{
    memcpy(
        target,
        rusdraw_.mip,
        sizeof(rusdraw_.mip)
    );
}


void get_rusdraw_mftchi2(real8 target[RUSDRAWMWF][2])
{
    memcpy(
        target,
        rusdraw_.mftchi2,
        sizeof(rusdraw_.mftchi2)
    );
}


void get_rusdraw_mftp(real8 target[RUSDRAWMWF][2][4])
{
    memcpy(
        target,
        rusdraw_.mftp,
        sizeof(rusdraw_.mftp)
    );
}


void get_rusdraw_mftpe(real8 target[RUSDRAWMWF][2][4])
{
    memcpy(
        target,
        rusdraw_.mftpe,
        sizeof(rusdraw_.mftpe)
    );
}

%}